{"version":3,"sources":["app.js"],"names":["createError","require","express","path","cookieParser","logger","mongoose","config","routes","indexRouter","usersRouter","app","set","join","__dirname","use","json","urlencoded","extended","req","res","next","err","locals","message","error","get","status","render","uri","process","env","USER","PASSWORD","DBNAME","connect","useNewUrlParser","useUnifiedTopology","then","console","log","e","listen","module","exports"],"mappings":"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","sourcesContent":["var createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\nconst mongoose = require('mongoose');\nrequire(\"dotenv\").config();\n\nconst routes = require('./routes/index');//para utilizar las rutas de forma ordenada\n\n\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n\n\napp.use(routes);\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\n\n\nconst uri = `mongodb+srv://${process.env.USER}:${process.env.PASSWORD}@cluster0.3hbs38c.mongodb.net/${process.env.DBNAME}?retryWrites=true&w=majority`;\n\n\nmongoose.connect(uri,\n    {\n        useNewUrlParser:true, useUnifiedTopology:true\n    })\n    .then(() => console.log(\"Base de datos conectada\"))\n    .catch(e=>console.log(e))\n\n//start the server\napp.listen(app.get('port'),() =>{\n    console.log(\"Servidor iniciado en puerto\",app.get('port'))\n});\n\nmodule.exports = app;\n"],"file":"app.dev.js"}