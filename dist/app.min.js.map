{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","mongoose","config","indexRouter","app","set","path","join","__dirname","use","logger","usersRouter","json","urlencoded","extended","next","req","res","locals","message","err","error","render","connect","process","env","USER","PASSWORD","DBNAME","uri","useNewUrlParser","useUnifiedTopology","then","console","log","e","listen","get","module","exports"],"mappings":"aAAA,IAAIA,YAAcC,QAAQ,eACtBC,QAAUD,QAAQ,WADlBD,KAAAA,QAAcC,QAGdE,aAAeF,QAAQ,iBAFvBC,OAAOD,QAAU,UAIfG,SAAWH,QAAQ,YAHzBA,QAAQ,UAAUI,SAClB,IAAIF,OAAAA,QAAeF,kBAQfK,YAAcL,QAAQ,kBANpBG,YAAWH,QAAQ,kBACzBA,IAAQC,UAWRK,IAAIC,IAAI,QAASC,KAAKC,KAAKC,UAAW,UACtCJ,IAAIC,IAAI,cAAe,OAEvBD,IAAIK,IAAIC,OAAO,QARfN,IAAIO,IAAAA,QAAWC,QAUfR,IAAIK,IAAIV,QAAQc,WAAW,CAAEC,UAAU,KARvCV,IAAIA,IAAGJ,gBAUPI,IAAIK,IAAIV,QAAO,OAAQO,KAAKC,KAAKC,UAAW,YAN5CJ,IAAIC,IAAI,IAAAF,aAERC,IAAIK,IAAIC,SAAOC,aAEcG,IAAAA,IAAAA,QAI7BV,IAAIK,IAAI,SAAKN,EAAAA,EAAbY,GACAX,EAAAP,YAAkBc,QAQhBI,IAAAA,IAAKlB,SAAAA,EAAWmB,EAAhBC,EAAAF,GAMAE,EAAIC,OAAOC,QAAUC,EAAID,QAF3Bf,EAAIK,OAAIY,MAA8B,gBAA9BL,EAAcA,IAAKC,IAAKF,OAAMK,EAAA,GAGpCH,EAAIC,OAAOG,EAAAA,QAAYjB,KAIvBa,EAAIK,OAAO,WAQbrB,IAAAA,IAASsB,iBAAAA,OACLC,QAAAC,IAAAC,KADKH,KAAAA,OACLC,QAAAC,IAAAE,SADKJ,kCAAAA,OACLC,QAAAC,IAAAG,OADKL,gCACLtB,SAGMsB,QAAAM,IAAA,CAJVC,iBAKY,EAAAC,oBAAA,IAEZC,KAAA,WAAA,OAAAC,QAAAC,IAAA,6BANI,MAIO,SAAAC,GAAC,OAAEF,QAAQC,IAAIC,KAKzB/B,IAFDgC,OAAAhC,IAAAiC,IAAA,QAAA,WAIAC,QAAOC,IAAP,8BAAAnC,IAAAiC,IAAA,WAAAC,OAAOC,QAAUnC","file":"app.min.js","sourcesContent":["var createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\nconst mongoose = require('mongoose');\nrequire(\"dotenv\").config();\n\nconst routes = require('./routes/index');//para utilizar las rutas de forma ordenada\n\n\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n\n\napp.use(routes);\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\n\n\nconst uri = `mongodb+srv://${process.env.USER}:${process.env.PASSWORD}@cluster0.3hbs38c.mongodb.net/${process.env.DBNAME}?retryWrites=true&w=majority`;\n\n\nmongoose.connect(uri,\n    {\n        useNewUrlParser:true, useUnifiedTopology:true\n    })\n    .then(() => console.log(\"Base de datos conectada\"))\n    .catch(e=>console.log(e))\n\n//start the server\napp.listen(app.get('port'),() =>{\n    console.log(\"Servidor iniciado en puerto\",app.get('port'))\n});\n\nmodule.exports = app;\n"]}