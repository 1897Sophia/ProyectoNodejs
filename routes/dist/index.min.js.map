{"version":3,"sources":["index.js"],"names":["express","require","router","Router","solicitudSchema","res","next","render","title","get","req","post","user","regeneratorRuntime","async","_context","prev","userSchema","nombre","body","txtNombre","apellido","txtApellido","awrap","correo","contraseña","t0","console","error","status","send","stop","_context2","tipoFinanciamiento","txttipoFinanciamiento","txtcondicionLaboral","txttipoDeCompra","seleccionMoneda","txtseleccionMoneda","save","log","User","_req$body","txtCorreo","txtContraseña","usuarioEncontrado","_context3","tipoDeCompra","sent","abrupt","mensaje","findByContra","usuario","json","_req$body2","accion","_context4","findByEmail","deleteOne","redirect","module","exports"],"mappings":"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","file":"index.min.js","sourcesContent":["var express = require('express');\nvar router = express.Router();\nconst userSchema = require('../models/user')\nconst solicitudSchema = require('../models/solicitudes')\nconst bcrypt = require('bcrypt');\n\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\n\nrouter.get('/registro',(req,res)=>{\n  res.render('registro');\n});\n\n\nrouter.get('/perfil',(req,res)=>{\n  res.render('perfil');\n});\n\nrouter.get('/solicitarprestamo',(req,res)=>{\n  res.render('solicitarprestamo');\n});\n\n\nrouter.get('/versolicitud',(req,res)=>{\n  res.render('versolicitud');\n});\n\n\nrouter.get('/login',(req,res)=>{\n  res.render('login');\n});\n\n//metodos\nrouter.post('/registro', async (req, res) => {\n  try {        \n      const user = new userSchema({\n      nombre: req.body.txtNombre,\n      apellido: req.body.txtApellido,\n      correo: req.body.txtCorreo,\n      contraseña: req.body.txtContraseña\n      });        \n      await user.save();\n      console.log('Se agregó un usuario nuevo');\n      res.render('index');  \n  } catch (error) {\n      console.error(error);\n      res.status(500).send('Error');\n  }\n});\n\n\n\nrouter.post('/solicitarprestamo', async (req, res) => {\n  try {        \n      const user = new solicitudSchema({\n        tipoFinanciamiento: req.body.txttipoFinanciamiento,\n        condicionLaboral: req.body.txtcondicionLaboral,\n        tipoDeCompra: req.body.txttipoDeCompra,\n        seleccionMoneda: req.body.txtseleccionMoneda\n      });        \n      await user.save();\n      console.log('Se agregó un usuario nuevo');\n      res.render('index');  \n  } catch (error) {\n      console.error(error);\n      res.status(500).send('Error');\n  }\n});\n\n\nconst User = require('../models/user'); \n\nrouter.post('/login', async (req, res) => {\n  const { txtCorreo, txtContraseña } = req.body;\n\n  try {\n    const usuarioEncontrado = await User.findByEmail(txtCorreo);\n\n    if (!usuarioEncontrado) {\n      return res.render('index', { mensaje: 'Correo incorrecto' });\n    }\n\n    const esContraseñaCorrecta = await User.findByContra(txtContraseña);;\n    if (!esContraseñaCorrecta) {\n      return res.render('index', { mensaje: 'Contraseña incorrecta' });\n    }\n\n    res.render('perfil', { usuario: usuarioEncontrado });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ mensaje: 'Error en el servidor' });\n  }\n});\n\nrouter.post('/perfil/editar', async (req, res) => {\n  const { txtCorreo, txtContraseña, txtNombre, txtApellido, accion } = req.body;\n\n  try {\n    const usuarioEncontrado = await User.findByEmail(txtCorreo);\n\n    if (!usuarioEncontrado) {\n      return res.render('index', { mensaje: 'Correo incorrecto' });\n    }\n    console.log(accion); \n    if (accion === 'actualizar') {\n      usuarioEncontrado.nombre = txtNombre;\n      usuarioEncontrado.apellido = txtApellido;\n      await usuarioEncontrado.save();\n      return res.render('perfil', { usuario: usuarioEncontrado, mensaje: 'Datos actualizados correctamente' });\n    } else if (accion === 'eliminar') {\n      await usuarioEncontrado.deleteOne();\n      return res.redirect('/'); \n    }\n    res.redirect('/perfil');\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ mensaje: 'Error en el servidor' });\n  }\n});\n\n\n\n\nmodule.exports = router;\n"]}